# Generated by Django 2.2.5 on 2020-02-13 10:45

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import utils.validations
import vendor.managers.vendor_manager
import vendor.managers.vendor_type_manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('company', '0005_merge_20200120_0858'),
        ('branch', '0007_auto_20200106_1242'),
    ]

    operations = [
        migrations.CreateModel(
            name='VendorType',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(default='system', max_length=512)),
                ('updated_by', models.CharField(default='system', max_length=512)),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1)),
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default=None, max_length=255, unique=True)),
            ],
            options={
                'db_table': 'vendor_types',
            },
            bases=(models.Model, vendor.managers.vendor_type_manager.VendorTypeManager),
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(default='system', max_length=512)),
                ('updated_by', models.CharField(default='system', max_length=512)),
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default=None, max_length=255, validators=[django.core.validators.MinLengthValidator(4), django.core.validators.RegexValidator(regex='^[A-Za-z]+[A-Za-z\\d\\._\\s]+$')])),
                ('email', models.EmailField(default=None, error_messages={'required': 'Vendor email required..!'}, max_length=254, unique=True)),
                ('secondary_email', django.contrib.postgres.fields.ArrayField(base_field=models.EmailField(max_length=254), blank=True, null=True, size=None)),
                ('contact_no', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True, validators=[utils.validations.ContactNumberValidation.validate_contact_no])),
                ('landline_no_dial_code', models.CharField(default=None, max_length=12, null=True)),
                ('landline_no', models.CharField(blank=True, default=None, max_length=12, null=True, validators=[django.core.validators.MinLengthValidator(10), django.core.validators.RegexValidator(regex='\\d{10}')])),
                ('password', models.CharField(default=None, max_length=255, null=True)),
                ('designation', models.CharField(default=None, max_length=25, null=True)),
                ('registration_token', models.UUIDField(blank=True, default=None, null=True)),
                ('token_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active'), (2, 'Pending')], default=2)),
                ('branch', models.ManyToManyField(blank=True, db_table='vendor_branches', to='branch.Branch')),
                ('company', models.ManyToManyField(db_table='vendor_companies', related_name='vendor_companies', to='company.Company')),
                ('home_company', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='company.Company')),
                ('supervisor', models.ManyToManyField(blank=True, db_table='vendor_supervisors', related_name='vendors', to='vendor.Vendor')),
                ('vendor_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='vendor.VendorType')),
            ],
            options={
                'db_table': 'vendors',
            },
            bases=(models.Model, vendor.managers.vendor_manager.VendorManager),
        ),
    ]
