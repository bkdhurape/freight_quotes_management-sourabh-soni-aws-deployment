"""
Django settings for cms project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from decouple import config

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'y8mg-!o3^ayu78-nn=wr$r%+7+si#zbs2+&ap10q6*6+dz^qo^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(" ")
ALLOWED_HOSTS = config("DJANGO_ALLOWED_HOSTS").split(" ")

# set DATA UPLOAD MAX MEMORY SIZE is upto 11MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 11534336


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'guardian',
    'corsheaders',
    'address',
    'company',
    'contact_person',
    'country',
    'currency',
    'customer',
    'department',
    'tag',
    'commodity',
    'state',
    'city',
    'region',
    'branch',
    'vendor',
    'login',
    'entity',
    'port',
    'profile',
    'product',
    'quote',
    'transport',
    'enquiry_management',
    'notification',
    'media_management',
    'django_cleanup',
    'django_filters'
 
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'middlewares.log_middleware.RequestLogMiddleware',
    'middlewares.login_required_middleware.LoginRequiredMiddleware'
]

# CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

CORS_ORIGIN_WHITELIST = config("DJANGO_CORS_ORIGIN_WHITELIST").split(" ")

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DATABASE_NAME'),
        'USER': config('DATABASE_USER'),
        'PASSWORD': config('DATABASE_PASSWORD'),
        'HOST': config('DATABASE_HOST'),
        'PORT': config('DATABASE_PORT'),
        'DJANGO_ALLOWED_HOSTS': config('DJANGO_ALLOWED_HOSTS'),
    },
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'static')

STATIC_URL = '/static/'

# Base url to serve media files
MEDIA_URL = config('API_HOST') + '/media/'

# Path where media is stored
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')


# Guardian settings
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # default
    'guardian.backends.ObjectPermissionBackend',
)

# Rest framework settings
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'EXCEPTION_HANDLER': 'exceptions.handlers.custom_exception_handler',
    'NON_FIELD_ERROR_KEY' :'non_field_errors'
}
API_HOST = config('API_HOST')
FRONTEND_URL = config('FRONTEND_URL')
PAGE_SIZE = config('PAGE_SIZE')
JWT_FCT_SECRET = config('JWT_FCT_SECRET')

# Activation token expiry limit in HOURS
TOKEN_EXPIRY_LIMIT = config('TOKEN_EXPIRY_LIMIT')

LOGIN_EXEPT_URLS = [
    r'^/api/v1/customer/$',
    r'^/api/v1/company/[0-9]+/customer/activate/*',
    r'^/api/v1/company/[0-9]+/customer/resend/*',
    r'^/api/v1/company/[0-9]+/vendor/send_activation_link/*',
    r'^/api/v1/company/[0-9]+/vendor/activate/*',
    r'^/api/v1/company/[0-9]+/vendor/resend/*',
    r'^/api/v1/vendor/$',
    r'^/api/v1/vendor_type/$',
    r'^/api/v1/vendor_type/[0-9]+/$',
    r'^/user/login/$',
    r'^/user/forgot-password/*',
    r'^/api/v1/profile/*',
    r'^/api/v1/reset_token/*',
    r'^/api/v1/country/*',
    r'^/admin/*',
    r'^/media/*'
]

# logging settings
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'console': {
            'format': '%(name)-12s %(levelname)-8s %(message)s'
        },
        'file': {
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
            'datefmt': "%d/%b/%Y %H:%M:%S"

        },
        'json': {
            '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'

        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'json',

        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'formatter': 'json',
            'filename': '/tmp/log'
        },
        'logstash': {
            'level': 'DEBUG',
            'class': 'logstash.LogstashHandler',
            'host': 'localhost',
            'port': 5959,  # Default value: 5959
            # Version of logstash event schema. Default value: 0 (for backward compatibility of the library)
            'version': 1,
            # 'type' field in logstash message. Default value: 'logstash'.
            'message_type': 'freightcrate',
            # Fully qualified domain name. Default value: false.
            'fqdn': False,
            'tags': ['django.request', ''],  # list of tags. Default: None.
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False
        },
        '': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False
        }
    }
}


# EMAIL CREDENTIALS

EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = config('EMAIL_USE_TLS')

ADMIN_EMAIL = config("ADMIN_EMAIL", 'fctnoreply00@gmail.com')

